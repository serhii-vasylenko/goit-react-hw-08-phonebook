{"version":3,"file":"static/js/750.b8003ef6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","redux/contacts/selectors.js","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/Dashboard/Dashboard.styled.jsx","components/Dashboard/Dashboard.jsx","pages/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { Button, Form } from 'react-bootstrap';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, number } = target.form.elements;\n    setName(name.value);\n    setNumber(number.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n    onSubmit();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Form.Group className=\"mb-3\">\n        <Form.Label>Name:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          placeholder='Enter name'\n          onChange={handleChange}\n        />\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\">\n        <Form.Label>Number:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          placeholder='Enter number'\n          onChange={handleChange}\n        />\n      </Form.Group>\n      <Button variant=\"secondary\" type=\"submit\">\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.toLowerCase();\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) =>\n    contacts.filter(contact => contact.name.toLowerCase().includes(filter))\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Form } from 'react-bootstrap';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilter = ({ currentTarget }) => {\n    dispatch(setFilter(currentTarget.value));\n  };\n\n  return (\n    <Form.Group className=\"mb-3\">\n      <Form.Label className='font-weight-bold'>Find contacts by Name:</Form.Label>\n      <Form.Control\n        type=\"text\"\n        value={value}\n        onChange={handleFilter}\n        placeholder=\"Type contact name\"\n      />\n    </Form.Group>\n  );\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from 'react-bootstrap';\n\nconst ContactListItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <li className=\"d-flex align-items-center justify-content-between list-group-item mb-1\">\n      {name}: {number} <Button variant='secondary' onClick={handleDelete}>Delete</Button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\nContactListItem.propTypes = {\n  contact: PropTypes.object,\n};\n","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n  selectFilteredContacts,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      {contacts.length === 0 && isLoading === false && error === null ? (\n        <p>Phonebook is empty</p>\n      ) : filteredContacts.length === 0 &&\n        isLoading === false &&\n        error === null ? (\n        <p className='text-danger'>Contact with name '{filter}' not found</p>\n      ) : (\n        isLoading === false &&\n        error === null && (\n          <>\n          <h4>Contacts count: <span>{contacts.length}</span></h4>\n          <ul className='list-group'>\n            {filteredContacts.map(contact => {\n              return <ContactListItem key={contact.id} contact={contact} />;\n            })}\n          </ul>\n          </>\n        )\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n\n  background: rgba(0, 0, 0, 0.2);\n\n  opacity: 1;\n  visibility: visible;\n  overflow-y: scroll;\n`;\n\nexport const Content = styled.div`\n  position: absolute;\n  left: 50.5%;\n  top: 20%;\n\n  width: 350px;\n  padding: 24px;\n\n  transform: translate(-50.5%, -20%);\n\n  border-radius: 20px;\n\n  background-color: #fff;\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { Backdrop, Content } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    window.addEventListener('keydown', habdleEscPress);\n\n    return () => {\n      window.removeEventListener('keydown', habdleEscPress);\n    };\n  });\n\n  const habdleEscPress = ({ code }) => {\n    if (code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = ({ currentTarget, target }) => {\n    if (currentTarget === target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <Content className='w-25'>{children}</Content>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\nModal.propTypes = {\n  onClose: PropTypes.func,\n  children: PropTypes.object,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div({\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  marginTop: '24px',\n  padding: '24px',\n\n  // boxShadow: `0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n  //   1px 4px 6px rgba(0, 0, 0, 0.16)`,\n  backgroundColor: '#eee',\n  borderRadius: '6px',\n  color: '#15172b',\n\n  display: 'grid',\n  gridTemplateColumns: '1fr',\n  gridGap: '8px',\n});\n","import { useState } from 'react';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport Modal from 'components/Modal/Modal';\n\nimport { Container } from './Dashboard.styled';\nimport { Button } from 'react-bootstrap';\n\nconst Dashboard = () => {\n  const [showModal, setShowModal] = useState(false);\n\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  return (\n    <Container>\n      <h1 className='mb-4'>Phonebook</h1>\n      <Button variant='secondary' type=\"button\" className='w-25' onClick={toggleModal}>\n        Add contact\n      </Button>\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <ContactForm onSubmit={toggleModal} />\n        </Modal>\n      )}\n\n      <h2 className='mb-3'>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import Dashboard from \"components/Dashboard/Dashboard\";\n\n \nconst Contacts = () => {\n    return(<Dashboard/>)\n}\n\nexport default Contacts;"],"names":["onSubmit","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","target","form","elements","value","Form","evt","preventDefault","addContact","autoComplete","className","type","pattern","title","required","placeholder","onChange","Button","variant","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","toLowerCase","selectFilteredContacts","createSelector","contact","includes","useSelector","currentTarget","setFilter","id","onClick","deleteContact","filteredContacts","useEffect","fetchContacts","length","map","Backdrop","styled","Content","modalRoot","document","querySelector","onClose","children","window","addEventListener","habdleEscPress","removeEventListener","code","createPortal","Container","marginLeft","marginRight","marginTop","padding","backgroundColor","borderRadius","color","display","gridTemplateColumns","gridGap","showModal","setShowModal","toggleModal"],"sourceRoot":""}