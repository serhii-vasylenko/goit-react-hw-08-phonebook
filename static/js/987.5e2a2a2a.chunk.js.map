{"version":3,"file":"static/js/987.5e2a2a2a.chunk.js","mappings":"8OAEaA,EAAOC,EAAAA,EAAAA,KAAY,CAC9BC,QAAS,OACTC,cAAe,SACfC,aAAc,SAGHC,EAAQJ,EAAAA,EAAAA,MAAa,CAChCG,aAAc,SAGHE,EAAQL,EAAAA,EAAAA,MAAa,CAChCM,MAAO,OACPC,OAAQ,OACRC,UAAW,MAEXC,aAAc,MACdC,OAAO,qC,GAGaV,EAAAA,EAAAA,OAAc,CAClCM,MAAO,QACPK,WAAY,OACZC,YAAa,OAEbC,gBAAiB,UACjBC,MAAO,OACPJ,OAAQ,OACRD,aAAc,MACdM,OAAQ,UACR,UAAW,CACTF,gBAAiB,a,kBC4BrB,EApDoB,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACrB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAC,GAAgB,IACpC,EADmC,EAAbC,OACUC,KAAKC,SAA7BT,EAAR,EAAQA,KAAME,EAAd,EAAcA,OACdD,EAAQD,EAAKU,OACbP,EAAUD,EAAOQ,MAClB,EAWD,OACE,UAAC7B,EAAD,CAAMiB,SAVa,SAAAa,GACnBA,EAAIC,iBAEJR,GAASS,EAAAA,EAAAA,IAAW,CAAEb,KAAAA,EAAME,OAAAA,KAC5BD,EAAQ,IACRE,EAAU,IACVL,GACD,EAG+BgB,aAAa,MAA3C,WACE,UAAC5B,EAAD,CAAO6B,QAAQ,GAAf,mBAEE,SAAC5B,EAAD,CACE6B,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRT,MAAOV,EACPoB,SAAUd,QAGd,UAACpB,EAAD,CAAO6B,QAAQ,GAAf,oBAEE,SAAC5B,EAAD,CACE6B,KAAK,MACLhB,KAAK,SACLiB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRT,MAAOR,EACPkB,SAAUd,QAGd,SAAC,IAAD,CAAQe,QAAQ,YAAYL,KAAK,SAAjC,2BAGL,E,oBCxDYM,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EACnBC,EAAe,SAAAP,GAAK,OAAIA,EAAMQ,OAAOC,aAAjB,EAEpBC,GAAyBC,EAAAA,EAAAA,IAAe,CAACZ,EAAgBQ,IAAe,SAACN,EAAUO,GAE9F,OADEI,QAAQC,IAAI,0BACPZ,EAASO,QAAO,SAAAM,GAAO,OAC5BA,EAAQrC,KAAKgC,cAAcM,SAASP,EADR,GAG/B,ICVY7C,EAAQJ,EAAAA,EAAAA,MAAa,CAChCG,aAAc,SAGHE,EAAQL,EAAAA,EAAAA,MAAa,CAChCM,MAAO,OACPC,OAAQ,OACRC,UAAW,MACXL,aAAc,OAEdM,aAAc,MACdC,OAAO,qCCQT,EAfe,WACb,IAAMkB,GAAQ6B,EAAAA,EAAAA,IAAYT,GACpB1B,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAAC,EAAD,CAAOU,QAAQ,GAAf,oCAEE,SAAC,EAAD,CAAOC,KAAK,OAAON,MAAOA,EAAOU,SAPhB,SAAC,GAAuB,IAArBoB,EAAoB,EAApBA,cACtBpC,GAASqC,EAAAA,EAAAA,GAAUD,EAAc9B,OAClC,MAQF,ECjBYgC,EAAO5D,EAAAA,EAAAA,GAAU,CAC5BC,QAAS,OACT4D,eAAgB,gBAChB1D,aAAc,QCYhB,GDRsBH,EAAAA,EAAAA,OAAc,CAClC8D,SAAU,OACVC,QAAS,MAETlD,gBAAiB,UACjBC,MAAO,OACPJ,OAAQ,OACRD,aAAc,MACdM,OAAQ,UACR,UAAW,CACTF,gBAAiB,aCbG,SAAC,GAAuC,IAAD,IAApC0C,QAAWrC,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,OAAQ4C,EAAW,EAAXA,GAC5C1C,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAACqC,EAAD,CAAMK,UAAU,4BAAhB,UACG/C,EADH,KACWE,EADX,KACmB,SAAC,IAAD,CAAQmB,QAAQ,YAAY2B,QAJ5B,kBAAM5C,GAAS6C,EAAAA,EAAAA,IAAcH,GAA7B,EAIA,sBAGtB,GCkCD,EArCoB,WAClB,IAAMtB,GAAWe,EAAAA,EAAAA,IAAYjB,GACvBK,GAAYY,EAAAA,EAAAA,IAAYb,GACxBG,GAAQU,EAAAA,EAAAA,IAAYX,GACpBG,GAASQ,EAAAA,EAAAA,IAAYT,GACrBoB,GAAmBX,EAAAA,EAAAA,IAAYN,GAE/B7B,GAAWC,EAAAA,EAAAA,MAMjB,OAJA8C,EAAAA,EAAAA,YAAU,WACR/C,GAASgD,EAAAA,EAAAA,MACV,GAAE,CAAChD,KAGF,gCACGuB,IAAa,+CACbE,IAAS,uBAAIA,IACO,IAApBL,EAAS6B,SAA8B,IAAd1B,GAAiC,OAAVE,GAC/C,8CAC8B,IAA5BqB,EAAiBG,SACL,IAAd1B,GACU,OAAVE,GACA,+CAAuBE,EAAvB,kBAEc,IAAdJ,GACU,OAAVE,IACE,wBACGqB,EAAiBI,KAAI,SAAAjB,GACpB,OAAO,SAAC,EAAD,CAAkCA,QAASA,GAArBA,EAAQS,GACtC,QAMZ,E,mBC7CYS,EAAWzE,EAAAA,EAAAA,IAAH,yMAcR0E,EAAU1E,EAAAA,EAAAA,IAAH,uNCVd2E,EAAYC,SAASC,cAAc,eA+BzC,EA7Bc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACxBV,EAAAA,EAAAA,YAAU,WAGR,OAFAW,OAAOC,iBAAiB,UAAWC,GAE5B,WACLF,OAAOG,oBAAoB,UAAWD,EACvC,CACF,IAED,IAAMA,EAAiB,SAAC,GACT,WADsB,EAAXE,MAEtBN,GAEH,EAQD,OAAOO,EAAAA,EAAAA,eACL,SAACZ,EAAD,CAAUP,QAPgB,SAAC,GAA8B,EAA5BR,gBAA4B,EAAbjC,QAE1CqD,GAEH,EAGC,UACE,SAACJ,EAAD,CAAST,UAAU,OAAnB,SAA2Bc,MAE7BJ,EAEH,ECjCYW,EAAYtF,EAAAA,EAAAA,IAAW,CAElCW,WAAY,OACZC,YAAa,OACbJ,UAAW,OACXuD,QAAS,OAETwB,UAAU,yGAEV1E,gBAAiB,OACjBJ,aAAc,OACdK,MAAO,UAEPb,QAAS,OACTuF,oBAAqB,MACrBC,QAAS,QCoBX,GDjByBzF,EAAAA,EAAAA,GACrB,CACIG,aAAc,SAIEH,EAAAA,EAAAA,GACpB,CACIG,aAAc,SClBJ,WAChB,OAAkCc,EAAAA,EAAAA,WAAS,GAA3C,eAAOyE,EAAP,KAAkBC,EAAlB,KAGMC,EAAc,WAClBD,GAAcD,EACf,EAED,OACE,UAACJ,EAAD,CAAWrB,UAAU,OAArB,WACE,eAAIA,UAAU,OAAd,wBACA,SAAC,IAAD,CAAQ1B,QAAQ,YAAYL,KAAK,SAASgC,QAAS0B,EAAnD,yBAGCF,IACC,SAAC,EAAD,CAAOZ,QAASc,EAAhB,UACE,SAAC,EAAD,CAAa5E,SAAU4E,OAI3B,eAAI3B,UAAU,OAAd,uBACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,GC5BD,EAJiB,WACb,OAAO,SAAC,EAAD,GACV,C","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/contacts/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/Dashboard/Dashboard.styled.jsx","components/Dashboard/Dashboard.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form({\n  display: 'flex',\n  flexDirection: 'column',\n  marginBottom: '32px',\n});\n\nexport const Label = styled.label({\n  marginBottom: '12px',\n});\n\nexport const Input = styled.input({\n  width: '100%',\n  height: '24px',\n  marginTop: '4px',\n\n  borderRadius: '4px',\n  border: `1px solid rgba(33, 33, 33, 0.2);`,\n});\n\nexport const Button = styled.button({\n  width: '120px',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n\n  backgroundColor: '#9d9d9d',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '4px',\n  cursor: 'pointer',\n  '&:hover': {\n    backgroundColor: '#15172b'\n  }\n});\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { Form, Label, Input } from './ContactForm.styled';\nimport { Button } from 'react-bootstrap';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, number } = target.form.elements;\n    setName(name.value);\n    setNumber(number.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n    onSubmit();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label htmlFor=\"\">\n        Name:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </Label>\n      <Label htmlFor=\"\">\n        Phone:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </Label>\n      <Button variant='secondary' type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.toLowerCase();\n\nexport const selectFilteredContacts = createSelector([selectContacts, selectFilter], (contacts, filter) => {\n    console.log('selectFilteredContacts');\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n} )","import styled from '@emotion/styled';\n\nexport const Label = styled.label({\n  marginBottom: '12px',\n});\n\nexport const Input = styled.input({\n  width: '100%',\n  height: '24px',\n  marginTop: '4px',\n  marginBottom: '12px',\n\n  borderRadius: '4px',\n  border: `1px solid rgba(33, 33, 33, 0.2);`,\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilter = ({ currentTarget }) => {\n    dispatch(setFilter(currentTarget.value));\n  };\n\n  return (\n    <Label htmlFor=\"\">\n      Find contacts by Name:\n      <Input type=\"text\" value={value} onChange={handleFilter}></Input>\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li({\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '4px',\n  \n});\n\nexport const Button = styled.button({\n  minWidth: '60px',\n  padding: '4px',\n\n  backgroundColor: '#9d9d9d',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '4px',\n  cursor: 'pointer',\n  '&:hover': {\n    backgroundColor: '#15172b'\n  }\n});\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Item } from './ContactListItem.styled';\nimport { Button } from 'react-bootstrap';\n\nconst ContactListItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Item className=\"d-flex align-items-center\">\n      {name}: {number} <Button variant='secondary' onClick={handleDelete}>Delete</Button>\n    </Item>\n  );\n};\n\nexport default ContactListItem;\nContactListItem.propTypes = {\n  contact: PropTypes.object,\n};\n","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n  selectFilteredContacts,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      {contacts.length === 0 && isLoading === false && error === null ? (\n        <p>Phonebook is empty</p>\n      ) : filteredContacts.length === 0 &&\n        isLoading === false &&\n        error === null ? (\n        <p>Contact with name '{filter}' not found</p>\n      ) : (\n        isLoading === false &&\n        error === null && (\n          <ul>\n            {filteredContacts.map(contact => {\n              return <ContactListItem key={contact.id} contact={contact} />;\n            })}\n          </ul>\n        )\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n\n  background: rgba(0, 0, 0, 0.2);\n\n  opacity: 1;\n  visibility: visible;\n  overflow-y: scroll;\n`;\n\nexport const Content = styled.div`\n  position: absolute;\n  left: 50.5%;\n  top: 20%;\n\n  width: 350px;\n  padding: 24px;\n\n  transform: translate(-50.5%, -20%);\n\n  border-radius: 20px;\n\n  \n\n  background-color: #fff;\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { Backdrop, Content } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    window.addEventListener('keydown', habdleEscPress);\n\n    return () => {\n      window.removeEventListener('keydown', habdleEscPress);\n    };\n  });\n\n  const habdleEscPress = ({ code }) => {\n    if (code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = ({ currentTarget, target }) => {\n    if (currentTarget === target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <Content className='w-25'>{children}</Content>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\nModal.propTypes = {\n  onClose: PropTypes.func,\n  children: PropTypes.object,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div({\n  // width: '340px',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  marginTop: '24px',\n  padding: '24px',\n\n  boxShadow: `0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16)`,\n  backgroundColor: '#eee',\n  borderRadius: '20px',\n  color: '#15172b',\n\n  display: 'grid',\n  gridTemplateColumns: '1fr',\n  gridGap: '8px'\n});\n\nexport const MainTitle = styled.h1(\n    {\n        marginBottom: '24px',\n    }\n)\n\nexport const SubTitle = styled.h2(\n    {\n        marginBottom: '16px',\n    }\n)","import { useState } from 'react';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport Modal from 'components/Modal/Modal';\n\nimport { Container } from './Dashboard.styled';\nimport { Button } from 'react-bootstrap';\n\nconst Dashboard = () => {\n  const [showModal, setShowModal] = useState(false);\n\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  return (\n    <Container className='w-50'>\n      <h1 className='mb-4'>Phonebook</h1>\n      <Button variant='secondary' type=\"button\" onClick={toggleModal}>\n        Add contact\n      </Button>\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <ContactForm onSubmit={toggleModal} />\n        </Modal>\n      )}\n\n      <h2 className='mb-3'>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import Dashboard from \"components/Dashboard/Dashboard\";\n\n \nconst Contacts = () => {\n    return(<Dashboard/>)\n}\n\nexport default Contacts;"],"names":["Form","styled","display","flexDirection","marginBottom","Label","Input","width","height","marginTop","borderRadius","border","marginLeft","marginRight","backgroundColor","color","cursor","onSubmit","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","target","form","elements","value","evt","preventDefault","addContact","autoComplete","htmlFor","type","pattern","title","required","onChange","variant","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","toLowerCase","selectFilteredContacts","createSelector","console","log","contact","includes","useSelector","currentTarget","setFilter","Item","justifyContent","minWidth","padding","id","className","onClick","deleteContact","filteredContacts","useEffect","fetchContacts","length","map","Backdrop","Content","modalRoot","document","querySelector","onClose","children","window","addEventListener","habdleEscPress","removeEventListener","code","createPortal","Container","boxShadow","gridTemplateColumns","gridGap","showModal","setShowModal","toggleModal"],"sourceRoot":""}